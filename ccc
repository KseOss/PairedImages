secundomer
using Microsoft.Maui.Controls;

namespace PR6_MAUI
{
    public partial class StopwatchPage : ContentPage
    {
        private int _seconds = 0;
        private bool _timerIsRun = false;
        private IDispatcherTimer _dispatcherTimer;

        public StopwatchPage()
        {
            InitializeComponent();
            SetupDispatcherTimer();
        }

        private void SetupDispatcherTimer()
        {
            _dispatcherTimer = Application.Current.Dispatcher.CreateTimer();
            _dispatcherTimer.Interval = TimeSpan.FromSeconds(1);
            _dispatcherTimer.Tick += OnDispatcherTimerTick;
        }

        private void OnStartClicked(object sender, EventArgs e)
        {
            _timerIsRun = true;
            btnStart.IsEnabled = false;
            btnStop.IsEnabled = true;
            btnPitStop.IsEnabled = true;
            btnClear.IsEnabled = false;

            _dispatcherTimer.Start();
        }

        private void OnStopClicked(object sender, EventArgs e)
        {
            _timerIsRun = false;
            _dispatcherTimer.Stop();
            btnStart.IsEnabled = true;
            btnStop.IsEnabled = false;
            btnPitStop.IsEnabled = false;
            btnClear.IsEnabled = true;

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            _ = NotificationService.ShowNotification("–°–µ–∫—É–Ω–¥–æ–º–µ—Ä", $"–°–µ–∫—É–Ω–¥–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timeLabel.Text}");
        }

        private void OnDispatcherTimerTick(object sender, EventArgs e)
        {
            if (_timerIsRun)
            {
                _seconds += 1;
                TimeSpan time = TimeSpan.FromSeconds(_seconds);
                timeLabel.Text = time.ToString(@"hh\:mm\:ss");
            }
        }

        private void OnPitStopClicked(object sender, EventArgs e)
        {
            Label lapLabel = new Label();
            TimeSpan time = TimeSpan.FromSeconds(_seconds);
            lapLabel.Text = $"–ö—Ä—É–≥: {time.ToString(@"hh\:mm\:ss")}";
            lapLabel.FontSize = 16;
            lapLabel.TextColor = Colors.Blue;
            pitStopContainer.Children.Add(lapLabel);

            // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫—Ä—É–≥–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            try
            {
                Vibration.Default.Vibrate(TimeSpan.FromMilliseconds(500));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Vibration error: {ex.Message}");
            }
        }

        private async void OnClearClicked(object sender, EventArgs e)
        {
            _seconds = 0;
            timeLabel.Text = "00:00:00";
            pitStopContainer.Children.Clear();
            btnClear.IsEnabled = false;
            
            await NotificationService.ShowNotification("–°–µ–∫—É–Ω–¥–æ–º–µ—Ä", "–°–µ–∫—É–Ω–¥–æ–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω");
        }
    }
}

napominalka
using Microsoft.Maui.Controls;

namespace PR6_MAUI
{
    public partial class ReminderPage : ContentPage
    {
        private IDispatcherTimer _timer;
        private List<Reminder> _reminders = new List<Reminder>();

        public ReminderPage()
        {
            InitializeComponent();
            SetupReminderTimer();
        }

        private void SetupReminderTimer()
        {
            _timer = Application.Current.Dispatcher.CreateTimer();
            _timer.Interval = TimeSpan.FromSeconds(1);
            _timer.Tick += OnReminderTimerTick;
            _timer.Start();
        }

        private async void OnSetReminderClicked(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(messageEntry.Text))
            {
                await DisplayAlert("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "OK");
                return;
            }

            DateTime reminderDateTime = datePicker.Date + timePicker.Time;

            if (reminderDateTime <= DateTime.Now)
            {
                await DisplayAlert("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º", "OK");
                return;
            }

            Reminder newReminder = new Reminder
            {
                DateTime = reminderDateTime,
                Message = messageEntry.Text
            };

            _reminders.Add(newReminder);
            UpdateRemindersList();

            statusLabel.Text = $"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminderDateTime:dd.MM.yyyy HH:mm}";
            statusLabel.TextColor = Colors.Green;

            messageEntry.Text = string.Empty;

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await NotificationService.ShowNotification("–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞", 
                $"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminderDateTime:dd.MM.yyyy HH:mm}");
        }

        private async void OnReminderTimerTick(object sender, EventArgs e)
        {
            DateTime now = DateTime.Now;

            for (int i = _reminders.Count - 1; i >= 0; i--)
            {
                if (_reminders[i].DateTime <= now)
                {
                    await ShowReminderNotification(_reminders[i].Message);
                    _reminders.RemoveAt(i);
                    UpdateRemindersList();
                }
            }
        }

        private async Task ShowReminderNotification(string message)
        {
            // –ë–æ–ª–µ–µ –Ω–∞–≤—è–∑—á–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            bool confirmed = await Application.Current.MainPage.DisplayAlert(
                "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                message,
                "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 5 –º–∏–Ω");

            if (!confirmed)
            {
                // –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 5 –º–∏–Ω—É—Ç
                Reminder postponedReminder = new Reminder
                {
                    DateTime = DateTime.Now.AddMinutes(5),
                    Message = $"[–û—Ç–ª–æ–∂–µ–Ω–æ] {message}"
                };
                _reminders.Add(postponedReminder);
                UpdateRemindersList();
                
                await NotificationService.ShowNotification("–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞", 
                    "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ 5 –º–∏–Ω—É—Ç");
            }
        }

        private void UpdateRemindersList()
        {
            remindersContainer.Children.Clear();

            foreach (var reminder in _reminders.OrderBy(r => r.DateTime))
            {
                Frame reminderFrame = new Frame
                {
                    BackgroundColor = Color.FromArgb("#E3F2FD"),
                    Padding = 10,
                    Margin = new Thickness(0, 0, 0, 5)
                };

                Label reminderLabel = new Label
                {
                    Text = $"{reminder.DateTime:dd.MM.yyyy HH:mm} - {reminder.Message}",
                    FontSize = 14,
                    TextColor = Colors.Black
                };

                reminderFrame.Content = reminderLabel;
                remindersContainer.Children.Add(reminderFrame);
            }
        }
    }

    public class Reminder
    {
        public DateTime DateTime { get; set; }
        public string Message { get; set; }
    }
}
