–ü–æ–Ω—è–ª! –í–∞–º –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Local Notification plugin. –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ:

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç Local Notification

–í —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ (.csproj) –¥–æ–±–∞–≤—å—Ç–µ:

```xml
<PackageReference Include="Plugin.LocalNotification" Version="13.0.1" />
```

2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Android

Platforms/Android/AndroidManifest.xml:

```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <uses-permission android:name="android.permission.VIBRATE" />
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
    <uses-permission android:name="android.permission.WAKE_LOCK" />
    <uses-permission android:name="android.permission.USE_FULL_SCREEN_INTENT" />
    
    <application
        android:allowBackup="true"
        android:icon="@mipmap/appicon"
        android:roundIcon="@mipmap/appicon_round"
        android:supportsRtl="true">
        
        <!-- –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å -->
        <activity android:name="Plugin.LocalNotification.NotificationActionReceiver"
                  android:exported="true" />
                  
    </application>
</manifest>
```

Platforms/Android/MainActivity.cs:

```csharp
using Android.App;
using Android.Content.PM;
using Plugin.LocalNotification;

namespace PR6_MAUI
{
    [Activity(Theme = "@style/Maui.SplashTheme", MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]
    public class MainActivity : MauiAppCompatActivity
    {
        protected override void OnCreate(Bundle? savedInstanceState)
        {
            base.OnCreate(savedInstanceState);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Local Notification
            NotificationCenter.CreateNotificationChannel(new NotificationChannelRequest
            {
                Id = "alarm_channel",
                Name = "–ë—É–¥–∏–ª—å–Ω–∏–∫",
                Description = "–ö–∞–Ω–∞–ª –¥–ª—è –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤",
                Importance = Android.App.NotificationImportance.High
            });
            
            NotificationCenter.CreateNotificationChannel(new NotificationChannelRequest
            {
                Id = "reminder_channel",
                Name = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                Description = "–ö–∞–Ω–∞–ª –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
                Importance = Android.App.NotificationImportance.High
            });
            
            NotificationCenter.CreateNotificationChannel(new NotificationChannelRequest
            {
                Id = "timer_channel", 
                Name = "–¢–∞–π–º–µ—Ä—ã",
                Description = "–ö–∞–Ω–∞–ª –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤",
                Importance = Android.App.NotificationImportance.High
            });
        }
        
        protected override void OnNewIntent(Android.Content.Intent? intent)
        {
            NotificationCenter.NotifyNotificationTapped(intent);
            base.OnNewIntent(intent);
        }
    }
}
```

3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è iOS (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

Platforms/iOS/AppDelegate.cs:

```csharp
using Foundation;
using Plugin.LocalNotification;
using UIKit;

namespace PR6_MAUI
{
    [Register("AppDelegate")]
    public class AppDelegate : MauiUIApplicationDelegate
    {
        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();

        public override void WillEnterForeground(UIApplication application)
        {
            NotificationCenter.ResetApplicationIconBadgeNumber();
        }
    }
}
```

4. –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å Local Notification

```csharp
using Plugin.LocalNotification;

namespace PR6_MAUI
{
    public static class PushNotificationService
    {
        public static async Task ShowNotification(string title, string message, int notificationId = 1000)
        {
            var request = new NotificationRequest
            {
                NotificationId = notificationId,
                Title = title,
                Description = message,
                BadgeNumber = 1,
                CategoryType = NotificationCategoryType.Alarm,
                Schedule = new NotificationRequestSchedule
                {
                    NotifyTime = DateTime.Now
                }
            };

            await NotificationCenter.Current.Show(request);
        }

        public static async Task ShowAlarmNotification(string message, TimeSpan alarmTime, int notificationId = 2000)
        {
            var request = new NotificationRequest
            {
                NotificationId = notificationId,
                Title = "‚è∞ –ë–£–î–ò–õ–¨–ù–ò–ö",
                Description = message,
                Subtitle = $"–ù–∞ {alarmTime:hh\\:mm}",
                BadgeNumber = 1,
                CategoryType = NotificationCategoryType.Alarm,
                Android = new AndroidOptions
                {
                    ChannelId = "alarm_channel",
                    Priority = AndroidPriority.Max,
                    VibrationPattern = new long[] { 1000, 1000, 1000, 1000 },
                    Ongoing = true, // –ù–µ–ª—å–∑—è —Å–º–∞—Ö–Ω—É—Ç—å
                    AutoCancel = false
                },
                Schedule = new NotificationRequestSchedule
                {
                    NotifyTime = DateTime.Now
                }
            };

            await NotificationCenter.Current.Show(request);
        }

        public static async Task ShowReminderNotification(string message, DateTime reminderTime, int notificationId = 3000)
        {
            var request = new NotificationRequest
            {
                NotificationId = notificationId,
                Title = "üîî –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï",
                Description = message,
                Subtitle = $"–ù–∞ {reminderTime:HH:mm}",
                BadgeNumber = 1,
                CategoryType = NotificationCategoryType.Reminder,
                Android = new AndroidOptions
                {
                    ChannelId = "reminder_channel",
                    Priority = AndroidPriority.High,
                    VibrationPattern = new long[] { 500, 500, 500 }
                },
                Schedule = new NotificationRequestSchedule
                {
                    NotifyTime = DateTime.Now
                }
            };

            await NotificationCenter.Current.Show(request);
        }

        public static async Task ShowTimerNotification(string message, int notificationId = 4000)
        {
            var request = new NotificationRequest
            {
                NotificationId = notificationId,
                Title = "‚è±Ô∏è –¢–ê–ô–ú–ï–†",
                Description = message,
                BadgeNumber = 1,
                CategoryType = NotificationCategoryType.Status,
                Android = new AndroidOptions
                {
                    ChannelId = "timer_channel",
                    Priority = AndroidPriority.High,
                    VibrationPattern = new long[] { 300, 300, 300, 300 }
                },
                Schedule = new NotificationRequestSchedule
                {
                    NotifyTime = DateTime.Now
                }
            };

            await NotificationCenter.Current.Show(request);
        }

        public static async Task ScheduleNotification(string title, string message, DateTime notifyTime, int notificationId)
        {
            var request = new NotificationRequest
            {
                NotificationId = notificationId,
                Title = title,
                Description = message,
                BadgeNumber = 1,
                Schedule = new NotificationRequestSchedule
                {
                    NotifyTime = notifyTime
                }
            };

            await NotificationCenter.Current.Show(request);
        }

        public static void CancelNotification(int notificationId)
        {
            NotificationCenter.Current.Cancel(notificationId);
        }

        public static void CancelAllNotifications()
        {
            NotificationCenter.Current.CancelAll();
        }
    }
}
```

5. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ —Å –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

```csharp
using Microsoft.Maui.Controls;
using Plugin.LocalNotification;

namespace PR6_MAUI
{
    public partial class AlarmPage : ContentPage
    {
        private TimeSpan _alarmTime;
        private IDispatcherTimer _timer;
        private bool _alarmTriggered = false;
        private int _alarmNotificationId = 1000;

        public AlarmPage()
        {
            InitializeComponent();
            SetupAlarmTimer();
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            NotificationCenter.Current.NotificationActionTapped += OnNotificationActionTapped;
        }

        private void OnAlarmToggled(object sender, ToggledEventArgs e)
        {
            if (e.Value)
            {
                _alarmTime = timePicker.Time;
                timePicker.IsEnabled = false;
                _alarmTriggered = false;
                _timer.Start();
                statusLabel.Text = "–ë—É–¥–∏–ª—å–Ω–∏–∫ –≤–∫–ª—é—á–µ–Ω";
                statusLabel.TextColor = Colors.Green;
                
                // –ü—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏
                _ = PushNotificationService.ShowNotification("–ë—É–¥–∏–ª—å–Ω–∏–∫", 
                    $"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {_alarmTime:hh\\:mm}", _alarmNotificationId);
            }
            else
            {
                timePicker.IsEnabled = true;
                _timer.Stop();
                statusLabel.Text = "–ë—É–¥–∏–ª—å–Ω–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω";
                statusLabel.TextColor = Colors.Gray;
                
                // –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                PushNotificationService.CancelNotification(_alarmNotificationId);
            }
        }

        private async void OnAlarmTimerTick(object sender, EventArgs e)
        {
            DateTime now = DateTime.Now;
            TimeSpan currentTime = new TimeSpan(now.Hour, now.Minute, now.Second);

            if (Math.Abs(_alarmTime.TotalMinutes - currentTime.TotalMinutes) < 1 && 
                !_alarmTriggered && CheckDayOfWeek(now.DayOfWeek))
            {
                _alarmTriggered = true;
                _timer.Stop();
                await TriggerAlarm();
            }
        }

        private bool CheckDayOfWeek(DayOfWeek day)
        {
            return day switch
            {
                DayOfWeek.Monday => mondaySwitch.IsToggled,
                DayOfWeek.Tuesday => tuesdaySwitch.IsToggled,
                DayOfWeek.Wednesday => wednesdaySwitch.IsToggled,
                DayOfWeek.Thursday => thursdaySwitch.IsToggled,
                DayOfWeek.Friday => fridaySwitch.IsToggled,
                DayOfWeek.Saturday => saturdaySwitch.IsToggled,
                DayOfWeek.Sunday => sundaySwitch.IsToggled,
                _ => false
            };
        }

        private async Task TriggerAlarm()
        {
            // –ù–∞—Å—Ç–æ—è—â–µ–µ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞
            await PushNotificationService.ShowAlarmNotification(
                "–ü–†–û–°–´–ü–ê–ô–¢–ï–°–¨! –í–†–ï–ú–Ø –í–°–¢–ê–í–ê–¢–¨!", 
                _alarmTime, 
                _alarmNotificationId);
        }

        private void OnNotificationActionTapped(NotificationActionEventArgs e)
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (e.Request.NotificationId == _alarmNotificationId)
            {
                // –í—ã–∫–ª—é—á–∞–µ–º –±—É–¥–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                MainThread.BeginInvokeOnMainThread(() =>
                {
                    alarmSwitch.IsToggled = false;
                });
            }
        }

        protected override void OnDisappearing()
        {
            base.OnDisappearing();
            NotificationCenter.Current.NotificationActionTapped -= OnNotificationActionTapped;
        }
    }
}
```

6. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞

```csharp
using Microsoft.Maui.Controls;
using Plugin.LocalNotification;

namespace PR6_MAUI
{
    public partial class ReminderPage : ContentPage
    {
        private IDispatcherTimer _timer;
        private List<Reminder> _reminders = new List<Reminder>();
        private int _reminderCounter = 5000;

        public ReminderPage()
        {
            InitializeComponent();
            SetupReminderTimer();
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            NotificationCenter.Current.NotificationActionTapped += OnReminderNotificationTapped;
        }

        private async void OnSetReminderClicked(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(messageEntry.Text))
            {
                await DisplayAlert("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "OK");
                return;
            }

            DateTime reminderDateTime = datePicker.Date + timePicker.Time;

            if (reminderDateTime <= DateTime.Now)
            {
                await DisplayAlert("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º", "OK");
                return;
            }

            int notificationId = _reminderCounter++;
            Reminder newReminder = new Reminder
            {
                DateTime = reminderDateTime,
                Message = messageEntry.Text,
                NotificationId = notificationId
            };

            _reminders.Add(newReminder);
            UpdateRemindersList();

            // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await PushNotificationService.ScheduleNotification(
                "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                messageEntry.Text,
                reminderDateTime,
                notificationId);

            statusLabel.Text = $"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminderDateTime:dd.MM.yyyy HH:mm}";
            statusLabel.TextColor = Colors.Green;
            messageEntry.Text = string.Empty;
        }

        private void OnReminderNotificationTapped(NotificationActionEventArgs e)
        {
            // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            var reminder = _reminders.FirstOrDefault(r => r.NotificationId == e.Request.NotificationId);
            if (reminder != null)
            {
                MainThread.BeginInvokeOnMainThread(() =>
                {
                    _reminders.Remove(reminder);
                    UpdateRemindersList();
                });
            }
        }

        private void UpdateRemindersList()
        {
            remindersContainer.Children.Clear();

            foreach (var reminder in _reminders.OrderBy(r => r.DateTime))
            {
                var frame = new Frame
                {
                    BackgroundColor = Color.FromArgb("#E3F2FD"),
                    Padding = 10,
                    Margin = new Thickness(0, 0, 0, 5)
                };

                var label = new Label
                {
                    Text = $"{reminder.DateTime:dd.MM.yyyy HH:mm} - {reminder.Message}",
                    FontSize = 14
                };

                frame.Content = label;
                remindersContainer.Children.Add(frame);
            }
        }

        protected override void OnDisappearing()
        {
            base.OnDisappearing();
            NotificationCenter.Current.NotificationActionTapped -= OnReminderNotificationTapped;
        }
    }

    public class Reminder
    {
        public DateTime DateTime { get; set; }
        public string Message { get; set; }
        public int NotificationId { get; set; }
    }
}
```

7. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä

```csharp
using Microsoft.Maui.Controls;
using Plugin.LocalNotification;

namespace PR6_MAUI
{
    public partial class StopwatchPage : ContentPage
    {
        private int _seconds = 0;
        private bool _timerIsRun = false;
        private IDispatcherTimer _dispatcherTimer;
        private int _notificationCounter = 6000;

        public StopwatchPage()
        {
            InitializeComponent();
            SetupDispatcherTimer();
        }

        private async void OnStopClicked(object sender, EventArgs e)
        {
            _timerIsRun = false;
            _dispatcherTimer.Stop();
            btnStart.IsEnabled = true;
            btnStop.IsEnabled = false;
            btnPitStop.IsEnabled = false;
            btnClear.IsEnabled = true;

            // –ü—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            await PushNotificationService.ShowTimerNotification(
                $"–°–µ–∫—É–Ω–¥–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timeLabel.Text}", 
                _notificationCounter++);
        }

        private async void OnPitStopClicked(object sender, EventArgs e)
        {
            TimeSpan time = TimeSpan.FromSeconds(_seconds);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥ –≤ —Å–ø–∏—Å–æ–∫
            Label lapLabel = new Label
            {
                Text = $"–ö—Ä—É–≥: {time.ToString(@"hh\:mm\:ss")}",
                FontSize = 16,
                TextColor = Colors.Blue
            };
            pitStopContainer.Children.Add(lapLabel);

            // –ü—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä—É–≥–µ
            await PushNotificationService.ShowTimerNotification(
                $"–ö—Ä—É–≥ –∑–∞–ø–∏—Å–∞–Ω: {time.ToString(@"hh\\:mm\\:ss")}", 
                _notificationCounter++);
        }
    }
}
```

8. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä

```csharp
using Microsoft.Maui.Controls;
using Plugin.LocalNotification;

namespace PR6_MAUI
{
    public partial class TimerPage : ContentPage
    {
        private TimeSpan _time;
        private IDispatcherTimer _timer;
        private int _timerNotificationId = 7000;

        public TimerPage()
        {
            InitializeComponent();
            SetupTimer();
        }

        private async void OnTimerTick(object sender, EventArgs e)
        {
            if (_time.CompareTo(new TimeSpan(0, 0, 0)) > 0)
            {
                _time = _time.Add(new TimeSpan(0, 0, -1));
                timeLabel.Text = _time.ToString(@"hh\:mm\:ss");
            }
            else
            {
                _timer.Stop();
                timeLabel.Text = "00:00:00";
                btnStart.IsEnabled = true;
                btnStop.IsEnabled = false;
                btnReset.IsEnabled = true;

                // –ü—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
                await PushNotificationService.ShowTimerNotification(
                    "–¢–ê–ô–ú–ï–† –ó–ê–í–ï–†–®–ï–ù! –í—Ä–µ–º—è –≤—ã—à–ª–æ!", 
                    _timerNotificationId);
            }
        }
    }
}
```

–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±—É–¥—É—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç:

¬∑ üì± –ü–æ—è–≤–ª—è—Ç—å—Å—è –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
¬∑ üîî –ò–∑–¥–∞–≤–∞—Ç—å –∑–≤—É–∫ –∏ –≤–∏–±—Ä–∞—Ü–∏—é
¬∑ ‚è∞ –û—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —à—Ç–æ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
¬∑ üëÜ –†–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏—è

–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É!